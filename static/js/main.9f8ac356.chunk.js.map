{"version":3,"sources":["Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","message","isUser","username","className","Card","CardContent","Typography","component","color","variant","text","App","useState","input","setInput","setMessage","setusername","useEffect","prompt","console","log","src","heigth","width","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","type","onClick","preventDefault","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8VAwBeA,MArBf,YAAsC,IAApBC,EAAmB,EAAnBA,QACRC,EAD2B,EAAXC,WACEF,EAAQE,SAChC,OAEF,yBAAKC,UAAS,uBAAkBF,GAAU,iBACxC,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAO,mBAAmB,qBACzC,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,MAAM,QAAQC,QAAQ,MAChDT,EAAQE,SADT,IACoBF,EAAQU,U,MCsCrBC,MA3Cf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNC,EADM,KACAC,EADA,OAUaF,mBAAS,CAAC,CAACV,SAAS,QAAQQ,KAAK,wBAV9C,mBAUPV,EAVO,KAUCe,EAVD,OAWeH,mBAAS,IAXxB,mBAWPV,EAXO,KAWEc,EAXF,KAmBb,OANFC,qBAAU,WACTD,EAAYE,OAAO,6BAClB,IAEAC,QAAQC,IAAIP,GACZM,QAAQC,IAAIpB,GAEV,yBAAKG,UAAU,OACb,yBAAKkB,IAAI,oFAAoFC,OAAO,OAAOC,MAAM,SACjH,kDACA,mCAASrB,EAAT,+BACA,8BACA,kBAACsB,EAAA,EAAD,KACJ,kBAACC,EAAA,EAAD,yBACA,kBAACC,EAAA,EAAD,CAAQC,MAAOd,EAAOe,SAAU,SAAAC,GAAK,OAAEf,EAASe,EAAMC,OAAOH,UAC7D,kBAACI,EAAA,EAAD,CAAQC,UAAWnB,EAAOJ,QAAQ,YAAYD,MAAM,UAAUyB,KAAK,SAASC,QA1B1D,SAACL,GACN,KAARhB,IAEHgB,EAAMM,iBACTpB,EAAW,GAAD,mBAAKf,GAAL,CAAa,CAACE,SAASA,EAASQ,KAAKG,MAC/CC,EAAS,OAqBR,kBAMId,EAAQoC,KAAI,SAAApC,GACZ,OAAQ,kBAAC,EAAD,CAASE,SAAUA,EAAUF,QAASA,SC7BhCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMtD,c","file":"static/js/main.9f8ac356.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Message.css';\r\nimport { Card,Typography,CardContent} from '@material-ui/core';\r\nfunction Message({message,username}) {\r\n    const isUser=username===message.username;\r\n    return (\r\n      \r\n  <div className={`message_card ${isUser && 'message_user'}`}>\r\n    <Card className={isUser?\"message_usercard\":\"message_guestcard\"}>\r\n      <CardContent>\r\n        <Typography component=\"h2\" color=\"white\" variant=\"h5\">\r\n        {message.username}:{message.text}\r\n        </Typography>\r\n       \r\n      </CardContent>\r\n     \r\n    </Card>\r\n\r\n  </div>\r\n\r\n           \r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useState,useEffect } from 'react';\nimport { Button ,FormControl,InputLabel,Input} from '@material-ui/core';\nimport Message from './Message';\n\nimport './App.css';\n\nfunction App() {\n  const [input,setInput]=useState('');\n  const sendMessage=(event)=>{\n    if(input!==\"\")\n    {\n    event.preventDefault();\n setMessage([...message,{username:username,text:input}]);\n setInput('');\n    }\n  }\n const [message,setMessage]=useState([{username:\"Manoj\",text:\"Hey guys what's up\"}]);\n const [username,setusername]=useState('');\n\nuseEffect(() => {\n setusername(prompt('Please enter your name'));\n},[])\n\n  console.log(input);\n  console.log(message);\n  return (\n    <div className=\"App\">\n      <img src=\"https://logodownload.org/wp-content/uploads/2017/04/facebook-messenger-logo-0.png\" heigth=\"60px\" width=\"70px\"/>\n      <h1>Facebook messenger</h1>\n      <h2>Hey {username}, welcome to Messenger App!</h2>\n      <form>\n      <FormControl>\n  <InputLabel >Enter message...</InputLabel>\n  <Input  value={input} onChange={event=>setInput(event.target.value)} />\n  <Button disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>Send Message</Button>\n</FormControl>\n      \n     \n      </form>\n      {\n      message.map(message=>{\n      return  <Message username={username} message={message}/>\n        \n      })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}